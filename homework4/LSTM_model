from tensorflow import keras
import numpy as np
import sys
from tensorflow.keras import layers

path = 'E:/pc_zhang/2025_spring_term/class_study/DL_NLP/homework4/data_jinyong/越女剑.txt'
with open(path,encoding='ANSI') as f:
    text = f.read()
print('Corpus length:', len(text))
ad = [  '本书来自www.cr173.com免费txt小说下载站\n更多更新免费电子书请关注www.cr173.com',
        '----〖新语丝电子文库(www.xys.org)〗','新语丝电子文库','本书','免费小说','下载站',
        '更新', '免费', '电子书', '请关注','小说', ',' ,' '                  
                        ]
for a in ad:
    text = text.replace(a, '')

print(len(text))
print(type(text))

print(text[0:400])

# 设置最大长度
maxlen = 60

# 设置采样步长
step = 3

sentences = []

next_chars = []

for i in range(0, len(text) - maxlen, step):
    sentences.append(text[i: i + maxlen])
    next_chars.append(text[i + maxlen])
print('Number of sequences:', len(sentences))

chars = sorted(list(set(text)))
print('Unique characters:', len(chars))

char_indices = dict((char, chars.index(char)) for char in chars)

print('Vectorization...')
x = np.zeros((len(sentences), maxlen, len(chars)), dtype=np.bool)
y = np.zeros((len(sentences), len(chars)), dtype=np.bool)
for i, sentence in enumerate(sentences):
    for t, char in enumerate(sentence):
        x[i, t, char_indices[char]] = 1
    y[i, char_indices[next_chars[i]]] = 1

print(chars)

model = keras.models.Sequential()
model.add(layers.LSTM(128, input_shape=(maxlen, len(chars))))
model.add(layers.Dense(len(chars), activation='softmax'))
optimizer = keras.optimizers.RMSprop(lr=0.01)
model.compile(loss='categorical_crossentropy', optimizer=optimizer)
def sample(preds, temperature=1.0):
    preds = np.asarray(preds).astype('float64')
    preds = np.log(preds) / temperature
    exp_preds = np.exp(preds)
    preds = exp_preds / np.sum(exp_preds)
    probas = np.random.multinomial(1, preds, 1)
    return np.argmax(probas)


for epoch in range(1, 60):
    print('epoch', epoch)
    model.fit(x, y,
              batch_size=128,
              epochs=1)


    generated_text = '越王勾践道：师兄，'
    print('--- 开始句子为: "' + generated_text + '"')

    for temperature in [0.2, 0.5, 1.0, 1.2]:
        print('------ temperature:', temperature)
        sys.stdout.write(generated_text)

        # We generate 400 characters
        for i in range(400):
            sampled = np.zeros((1, maxlen, len(chars)))
            for t, char in enumerate(generated_text):
                sampled[0, t, char_indices[char]] = 1.

            preds = model.predict(sampled, verbose=0)[0]
            next_index = sample(preds, temperature)
            next_char = chars[next_index]

            generated_text += next_char
            generated_text = generated_text[1:]

            sys.stdout.write(next_char)
            sys.stdout.flush()
        print()
